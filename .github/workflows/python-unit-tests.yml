name: Run Python Unit Tests with Coverage

on:
  workflow_call:
    inputs:
      services:
        required: true
        type: string
      event_name:
        required: true
        type: string
      ref:
        required: true
        type: string
      base_ref:
        required: false
        type: string
      service_path:
        required: true
        type: string
      python_version:
        required: false
        type: string
        default: '3.10'

jobs:
  unit-test-python:
    if: |
      inputs.event_name == 'push' && startsWith(inputs.ref, 'refs/heads/feature/') && inputs.services != '[]' ||
      inputs.event_name == 'pull_request' && inputs.base_ref == 'dev' && inputs.services != '[]'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.service_path }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

          if [ -f pyproject.toml ]; then
            echo "üîß Installing via pyproject.toml..."
            pip install .
          elif [ -f requirements.txt ]; then
            echo "üì¶ Installing via requirements.txt..."
            pip install -r requirements.txt
          else
            echo "‚ö†Ô∏è No requirements.txt or pyproject.toml found."
            exit 1
          fi

          pip install pytest pytest-cov

      - name: Run pytest with coverage
        run: |
          echo "‚úÖ Running tests with coverage..."
          PYTHONPATH=. pytest \
            --cov=. \
            --cov-report=xml \
            --cov-report=html \
            --junitxml=test-results.xml

          echo "üìä Coverage Summary:"
          coverage report

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: python-test-results
          path: ${{ inputs.service_path }}/test-results.xml

      - name: Upload coverage report (xml)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: ${{ inputs.service_path }}/coverage.xml

      - name: Upload coverage report (HTML)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: ${{ inputs.service_path }}/htmlcov/
      
      - name: Publish Test Report (visual UI)
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Pytest Report
          path: ${{ inputs.service_path }}/test-results.xml
          reporter: java-junit